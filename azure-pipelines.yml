# Azure Pipelines for HW8 ingestion (Windows agent)
trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

steps:
  - checkout: self

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11'

  # Show repo layout to help debugging paths
  - powershell: |
      Write-Host "Repo root: $(Build.SourcesDirectory)"
      Get-ChildItem -Recurse -Depth 2 -Path "$(Build.SourcesDirectory)" | ForEach-Object {
        "{0}`t{1}" -f $_.PSIsContainer, $_.FullName
      }
    displayName: 'List files (debug)'

  # Install Microsoft ODBC Driver 18 for SQL Server (x64) via MSI
  - powershell: |
      $ErrorActionPreference = "Stop"
      $url = "https://go.microsoft.com/fwlink/?linkid=2290265"  # msodbcsql18 x64
      $msi = "$(Agent.TempDirectory)\msodbcsql18.msi"
      Invoke-WebRequest -Uri $url -OutFile $msi
      Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn IACCEPTMSODBCSQLLICENSETERMS=YES ADDLOCAL=ALL" -Wait -NoNewWindow
      Write-Host "ODBC 18 installed."
    displayName: 'Install ODBC Driver 18 (MSI)'

  # Detect requirements.txt and ingest.py paths dynamically
  - powershell: |
      $root = "$(Build.SourcesDirectory)"
      $req1 = Join-Path $root "HW8\requirements.txt"
      $req2 = Join-Path $root "requirements.txt"
      if (Test-Path $req1) { $env:REQ = $req1 } elseif (Test-Path $req2) { $env:REQ = $req2 } else { throw "requirements.txt not found" }
      $py1 = Join-Path $root "HW8\ingest.py"
      $py2 = Join-Path $root "ingest.py"
      if (Test-Path $py1) { $env:SCRIPT = $py1 } elseif (Test-Path $py2) { $env:SCRIPT = $py2 } else { throw "ingest.py not found" }
      Write-Host "Using requirements: $env:REQ"
      Write-Host "Using script:      $env:SCRIPT"
      echo "REQ=$env:REQ" >> $(Pipeline.Workspace)\pathvars.txt
      echo "SCRIPT=$env:SCRIPT" >> $(Pipeline.Workspace)\pathvars.txt
    displayName: 'Detect paths'

  - script: |
      for /f "tokens=1,2 delims==" %%A in ($(Pipeline.Workspace)\pathvars.txt) do set %%A=%%B
      python -m pip install --upgrade pip
      pip install -r "%REQ%"
    displayName: 'Install Python deps'

  - script: |
      for /f "tokens=1,2 delims==" %%A in ($(Pipeline.Workspace)\pathvars.txt) do set %%A=%%B
      python "%SCRIPT%"
    displayName: 'Run ingestion'
    env:
      AZURE_SQL_SERVER: hwdbms.database.windows.net
      AZURE_SQL_DATABASE: hwdbms
      AZURE_SQL_USER: hwdbms
      AZURE_SQL_PASSWORD: $(AZURE_SQL_PASSWORD)
